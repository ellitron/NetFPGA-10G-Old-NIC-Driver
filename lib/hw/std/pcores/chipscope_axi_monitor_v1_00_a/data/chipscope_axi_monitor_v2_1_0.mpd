#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : chipscope_axi_monitor
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN chipscope_axi_monitor

## Peripheral Options
OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION STYLE = MIX
OPTION RUN_NGCBUILD = TRUE
OPTION IPLEVEL_DRC_PROC = axi_monitor_drc
OPTION ELABORATE_PROC = axi_monitor_generate
OPTION HDL = VHDL
OPTION LAST_UPDATED = 12.3
OPTION DESC = Chipscope AXI Monitor
OPTION LONG_DESC = AXI Memory Map Monitor Based on Chipscope Integrated Logic Analyzer (ILA)
OPTION IP_GROUP = Debug:MICROBLAZE


## Bus Interfaces
BUS_INTERFACE BUS = MON_AXI, BUS_STD = AXI, BUS_TYPE = MONITOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_MON_AXI_PROTOCOL = axi4, DT = string, ASSIGNMENT = UPDATE, BUS = MON_AXI, VALUE = (axi4=axi4, axi4lite=axi4lite)
PARAMETER C_FAMILY = spartan6, DT = string
PARAMETER C_DEVICE = xc6slx45t, DT = string
PARAMETER C_PACKAGE = fgg484, DT = string
PARAMETER C_SPEEDGRADE = -2, DT = string
PARAMETER C_NUM_DATA_SAMPLES = 1024, DT = integer, ASSIGNMENT = REQUIRE, RANGE = (1024,2048,4096,8192,16384,32768,65536,131072)
PARAMETER C_MAX_SEQUENCER_LEVELS = 2, DT = integer, ASSIGNMENT = REQUIRE, RANGE = (1:16)
PARAMETER C_TRIG_IN_WIDTH = 1, DT = integer, ASSIGNMENT = OPTIONAL, ISVALID = ( C_USE_TRIG_IN > 0 ), RANGE = (1:255)
PARAMETER C_MON_AXI_SUPPORTS_THREADS = 1, DT = integer, ASSIGNMENT = UPDATE, RANGE = (0,1)
PARAMETER C_MON_AXI_ID_WIDTH = 1, DT = integer, ASSIGNMENT = UPDATE, BUS = MON_AXI
PARAMETER C_MON_AXI_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = MON_AXI, RANGE = (32)
PARAMETER C_MON_AXI_DATA_WIDTH = 32, DT = integer, ASSIGNMENT = UPDATE, BUS = MON_AXI, RANGE = (32, 64, 128, 256)
PARAMETER C_MON_AXI_SUPPORTS_USER_SIGNALS = 0, DT = integer, ASSIGNMENT = UPDATE, BUS = MON_AXI, RANGE = (0,1)
PARAMETER C_MON_AXI_SUPPORTS_READ = 1, DT = integer, ASSIGNMENT = UPDATE, BUS = MON_AXI, RANGE = (0,1)
PARAMETER C_MON_AXI_SUPPORTS_WRITE = 1, DT = integer, ASSIGNMENT = UPDATE, BUS = MON_AXI, RANGE = (0,1)
PARAMETER C_USE_TRIG_IN = 0, DT = integer, ASSIGNMENT = OPTIONAL, RANGE = (0,1)

## Ports
PORT CHIPSCOPE_ICON_CONTROL = "", DIR = I, VEC = [35:0], ASSIGNMENT = REQUIRE
PORT MON_AXI_TRIG_OUT = "", DIR = O
PORT MON_AXI_TRIG_IN = "", DIR = I, VEC = [(C_TRIG_IN_WIDTH)-1:0], ISVALID = ( C_USE_TRIG_IN > 0 )
PORT MON_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_AWID = AWID, DIR = I, VEC = [((C_MON_AXI_ID_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = ( [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ] && ( C_MON_AXI_ID_WIDTH >=  1 ) )
PORT MON_AXI_AWADDR = AWADDR, DIR = I, VEC = [((C_MON_AXI_ADDR_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_AWLEN = AWLEN, DIR = I, VEC = [7:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWLOCK = AWLOCK, DIR = I, BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWREGION = AWREGION, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_AWVALID = AWVALID, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_AWREADY = AWREADY, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_WDATA = WDATA, DIR = I, VEC = [((C_MON_AXI_DATA_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_WSTRB = WSTRB, DIR = I, VEC = [(((C_MON_AXI_DATA_WIDTH)/8)-1):0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_WLAST = WLAST, DIR = I, BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_WVALID = WVALID, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_WREADY = WREADY, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_BID = BID, DIR = I, VEC = [((C_MON_AXI_ID_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = ( [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ] && ( C_MON_AXI_ID_WIDTH >=  1) )
PORT MON_AXI_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_BVALID = BVALID, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_BREADY = BREADY, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_ARID = ARID, DIR = I, VEC = [((C_MON_AXI_ID_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = ( [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ] && ( C_MON_AXI_ID_WIDTH >= 1 ) )
PORT MON_AXI_ARADDR = ARADDR, DIR = I, VEC = [((C_MON_AXI_ADDR_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_ARLEN = ARLEN, DIR = I, VEC = [7:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARLOCK = ARLOCK, DIR = I, BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARREGION = ARREGIO, DIR = I, VEC = [3:0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_ARVALID = ARVALID, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_ARREADY = ARREADY, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_RID = RID, DIR = I, VEC = [((C_MON_AXI_ID_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = ( [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ] && ( C_MON_AXI_ID_WIDTH >= 1 ) )
PORT MON_AXI_RDATA = RDATA, DIR = I, VEC = [((C_MON_AXI_DATA_WIDTH)-1):0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_RLAST = RLAST, DIR = I, BUS = MON_AXI, ASSIGNMENT = OPTIONAL, ISVALID = [ xstrncmp  C_MON_AXI_PROTOCOL   AXI4  ]
PORT MON_AXI_RVALID = RVALID, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE
PORT MON_AXI_RREADY = RREADY, DIR = I, BUS = MON_AXI, ASSIGNMENT = REQUIRE

END
